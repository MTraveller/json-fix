{
    "RE_TRAILING_COMMA_IN_ARRAY": (
        pattern: r#",\s*(\])"#,
        description: Some("Trailing commas in arrays"),
        scope: Some("array_trailing_comma"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_DOUBLE_COMMAS": (
        pattern: r#",\s*,+"#,
        description: Some("Double commas in JSON"),
        scope: Some("comma_double"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_DOUBLE_CLOSING_BRACE": (
        pattern: r#"\}\s*\}+"#,
        description: Some("Extra closing braces"),
        scope: Some("bracket_double_closing"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_SMART_QUOTES": (
        pattern: r#"[“”]"#,
        description: Some("Smart quotes (double curly)"),
        scope: Some("quote_smart_double"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_SINGLE_QUOTES": (
        pattern: r#"'([^']*)'"#,
        description: Some("Single quotes used instead of double quotes"),
        scope: Some("quote_single"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_MULTI_ROOT_OBJECTS": (
        pattern: r#"\}\s*\{"#,
        description: Some("Multiple root objects without separator"),
        scope: Some("structure_multi_root_objects"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_ORPHANED_OPEN_BRACE": (
        pattern: r#"\{[^\{\}]*$"#,
        description: Some("Orphaned opening brace at end"),
        scope: Some("bracket_orphaned_open"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_ORPHANED_CLOSE_BRACE": (
        pattern: r#"^[^\{\}]*\}"#,
        description: Some("Orphaned closing brace at start"),
        scope: Some("bracket_orphaned_close"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_UNDEFINED": (
        pattern: r#"\bundefined\b"#,
        description: Some("JavaScript-style 'undefined' value"),
        scope: Some("js_style_undefined"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_CURLY_QUOTES": (
        pattern: r#"[‘’]"#,
        description: Some("Smart quotes (single curly)"),
        scope: Some("quote_smart_single"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_MALFORMED_NESTED_ARRAYS": (
        pattern: r#"\[\s*\[|\]\s*\]|\[\s*\]"#,
        description: Some("Malformed nested arrays"),
        scope: Some("array_malformed_nested"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_EMPTY_ARRAY_SLOTS": (
        pattern: r#",\s*(,)+"#,
        description: Some("Empty array slots"),
        scope: Some("array_empty_slots"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_LEADING_COMMA_IN_ARRAY": (
        pattern: r#"\[\s*,\s*"#,
        description: Some("Leading comma in array"),
        scope: Some("array_leading_comma"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_ADJACENT_STRINGS": (
        pattern: r#"s+\""#,
        description: Some("Adjacent strings with no comma"),
        scope: Some("quote_adjacent_strings"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_MISSING_COLON": (
        pattern: r#"\"[^\"]+\"\s+\"[^\"]+\""#,
        description: Some("Missing colon between key and value"),
        scope: Some("structure_missing_colon"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_DOUBLE_COLON": (
        pattern: r#"\"[^\"]+\"\s*::"#,
        description: Some("Double colon in key-value pair"),
        scope: Some("structure_double_colon"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_CHAINED_STRING_VALUES": (
        pattern: r#"\"[^\"]+\"\s+[^\"]+\""#,
        description: Some("Chained string values without commas"),
        scope: Some("structure_chained_strings"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_MISSING_COMMAS_BETWEEN_PAIRS": (
        pattern: r#"\"[^\"]+\"\s*:\s*\"[^\"]+\"\s+\"[^\"]+\"\s*:"#,
        description: Some("Missing commas between key-value pairs"),
        scope: Some("structure_missing_commas"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_STRAY_COMMA_AFTER_OPENING": (
        pattern: r#"(?:\{|\[)\s*,"#,
        description: Some("Stray comma after opening brace or bracket"),
        scope: Some("bracket_stray_comma"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_INVALID_ESCAPES": (
        pattern: r#"[^btnfru\"]"#,
        description: Some("Invalid escape sequences"),
        scope: Some("escape_invalid_sequences"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_BROKEN_UNICODE_ESCAPES": (
        pattern: r#"u[0-9a-fA-F]{1,3}[^0-9a-fA-F]"#,
        description: Some("Broken unicode escapes"),
        scope: Some("escape_broken_unicode"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_ORPHANED_STRING_VALUE": (
        pattern: r#"\bnull\s*,\s*\"[^\"]+\""#,
        description: Some("Orphaned string value after null"),
        scope: Some("semantic_orphaned_string"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_KEY_VALUE_MISALIGNED": (
        pattern: r#"\"\s*:\s*,\s*\""#,
        description: Some("Key-value misalignment"),
        scope: Some("semantic_key_value_misaligned"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_NAN_INFINITY": (
        pattern: r#"\b(NaN|Infinity|-Infinity)\b"#,
        description: Some("JavaScript-style NaN or Infinity"),
        scope: Some("js_style_nan_infinity"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_JS_COMMENTS": (
        pattern: r#"(//[^\n]*|/\*[\s\S]*?\*/)"#,
        description: Some("JavaScript-style comments"),
        scope: Some("js_style_comments"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_UNQUOTED_KEYS": (
        pattern: r#"\b[a-zA-Z_][a-zA-Z0-9_]*\s*:"#,
        description: Some("Unquoted keys followed by colon"),
        scope: Some("quote_unquoted_keys"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_KEY_TRAPS": (
        pattern: r#"\"[^\"]*\"\s*:\s*(,|])"#,
        description: Some("Key traps with invalid characters"),
        scope: Some("structure_key_traps"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_MARKDOWN_WRAPPER": (
        pattern: r#"(?s)```(?:json)?\s*(.*?)\s*```"#,
        description: Some("Markdown-wrapped JSON blocks"),
        scope: Some("markdown_wrapper"),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_MARKDOWN_JSON_BLOCK": (
        pattern: r#"(?s)(?:^|\n)\s*```(?:json)?\s*(.*?)\s*```(?:\n|$)"#,
        description: Some("Fenced markdown JSON blocks"),
        scope: Some("markdown_json_block"),
        enabled: Some(true),
        engine: Some("fancy"),
        emotion_phase: None,
    ),
    "RE_NULL_SLOTS": (
        pattern: r#"(\":\s*)(,|\])"#,
        description: Some("Null slots like 'key': ,"),
        scope: Some("semantic_null_slots"),
        enabled: Some(true),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_FALLBACK_ARTIFACTS": (
        pattern: r#"\s*,\s*(\"[^\"]*\")\s*,\s*"#,
        description: Some("Fallback artifacts between values"),
        scope: Some("semantic_fallback_artifacts"),
        enabled: Some(true),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_UNFINISHED_VALUE": (
        pattern: r#"\"\\w+\"\\s*:\\s*$"#,
        description: Some("Key with unfinished value"),
        scope: Some("structure_unfinishedvalue"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_TRUNCATED_BLOCK": (
        pattern: r#"[\{\[][^]*$"#,
        description: Some("Likely truncated JSON block"),
        scope: Some("structure_truncated"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_REPEATED_KEYS": (
        pattern: r#"\"(\\w+)\"\\s*:"#,
        description: Some("Repeated keys in object"),
        scope: Some("structure_repeatedkeys"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_COLON_UNPAIRED_KEYVALUE": (
        pattern: r#"\"[^\\\"]+\"\\s+\"[^\\\"]+\""#,
        description: Some("Unpaired key-value without colon"),
        scope: Some("colon_unpairedkeyvalue"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_FLOAT_NO_ZERO": (
        pattern: r#"(?<!\d)\.\d+"#,
        description: Some("Float without leading zero"),
        scope: Some("number_floatnozero"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_TRAILING_DOT": (
        pattern: r#"\d+\."#,
        description: Some("Number with trailing dot"),
        scope: Some("number_trailingdot"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_UNCLOSED_STRING": (
        pattern: r#"\"[^\\\"\n]*$"#,
        description: Some("Unclosed string value"),
        scope: Some("quote_unclosedstring"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_INVALID_ESCAPE_SEQUENCE": (
        pattern: r#"\\\\[^btnfr\\\"\\\\/u]"#,
        description: Some("Invalid escape character"),
        scope: Some("escape_invalidsequence"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_BACKTICKED_KEYS": (
        pattern: r#"`[^`]+`\s*:"#,
        description: Some("Backticked keys used"),
        scope: Some("quote_backtickedkeys"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_STRINGIFIED_BOOLEAN": (
        pattern: r#"\"(true|false|null)\""#,
        description: Some("Stringified boolean or null"),
        scope: Some("boolean_stringified"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_UNQUOTED_STRING": (
        pattern: r#"(?<=[:,\{]\s*)[a-zA-Z_]\w*(?=\s*[:,\}])"#,
        description: Some("Unquoted string used as value"),
        scope: Some("string_unquoted"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_NEGATIVE_INVALID": (
        pattern: r#"-\s*\d+"#,
        description: Some("Invalid negative number"),
        scope: Some("number_negativeinvalid"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_JSON_BLOCK_QUOTED": (
        pattern: r#"\"\\s*\\{[^}]+\\}\""#,
        description: Some("JSON block inside string quotes"),
        scope: Some("structure_jsonblockquote"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
    "RE_MULTILINE_STRING": (
        pattern: r#""([^"]*\n[^"]*)+""#,
        description: Some("Multiline string without escaping"),
        scope: Some("string_multiline"),
        engine: Some("regex"),
        emotion_phase: None,
    ),
}